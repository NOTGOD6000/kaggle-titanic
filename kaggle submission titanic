{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-20T12:18:31.204889Z","iopub.execute_input":"2025-06-20T12:18:31.205253Z","iopub.status.idle":"2025-06-20T12:18:31.217543Z","shell.execute_reply.started":"2025-06-20T12:18:31.205230Z","shell.execute_reply":"2025-06-20T12:18:31.216252Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"train=pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntest=pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n\ntrain.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:17:47.058511Z","iopub.execute_input":"2025-06-20T13:17:47.058807Z","iopub.status.idle":"2025-06-20T13:17:47.083684Z","shell.execute_reply.started":"2025-06-20T13:17:47.058783Z","shell.execute_reply":"2025-06-20T13:17:47.082613Z"}},"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":61},{"cell_type":"code","source":"train.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:17:54.720871Z","iopub.execute_input":"2025-06-20T13:17:54.721209Z","iopub.status.idle":"2025-06-20T13:17:54.732378Z","shell.execute_reply.started":"2025-06-20T13:17:54.721185Z","shell.execute_reply":"2025-06-20T13:17:54.731370Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}],"execution_count":62},{"cell_type":"code","source":"train.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:18:02.439544Z","iopub.execute_input":"2025-06-20T13:18:02.439912Z","iopub.status.idle":"2025-06-20T13:18:02.473731Z","shell.execute_reply.started":"2025-06-20T13:18:02.439886Z","shell.execute_reply":"2025-06-20T13:18:02.472968Z"}},"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":63},{"cell_type":"code","source":"import seaborn as sns\ncorrelation_matrix = train.corr(numeric_only=True)\nsns.heatmap(correlation_matrix)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:18:05.788085Z","iopub.execute_input":"2025-06-20T13:18:05.788384Z","iopub.status.idle":"2025-06-20T13:18:06.026835Z","shell.execute_reply.started":"2025-06-20T13:18:05.788362Z","shell.execute_reply":"2025-06-20T13:18:06.026004Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":64},{"cell_type":"code","source":"sns.heatmap(train.isnull(), cbar=False)\nplt.title(\"Missing Values in Train Set\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:21:35.342987Z","iopub.execute_input":"2025-06-20T13:21:35.343273Z","iopub.status.idle":"2025-06-20T13:21:35.643051Z","shell.execute_reply.started":"2025-06-20T13:21:35.343253Z","shell.execute_reply":"2025-06-20T13:21:35.642185Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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\n"},"metadata":{}}],"execution_count":73},{"cell_type":"code","source":"sns.countplot(data=train, x='Survived')\nplt.title('Survival Counts')\nplt.xlabel('Survived (0 = No, 1 = Yes)')\nplt.ylabel('Count')\nplt.show()\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:18:22.600024Z","iopub.execute_input":"2025-06-20T13:18:22.600611Z","iopub.status.idle":"2025-06-20T13:18:22.733320Z","shell.execute_reply.started":"2025-06-20T13:18:22.600587Z","shell.execute_reply":"2025-06-20T13:18:22.732405Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":66},{"cell_type":"code","source":"sns.countplot(data=train, x='Sex', hue='Survived')\nplt.title('Survival by Sex')\nplt.show()\n\nprint(train.groupby('Sex')['Survived'].mean())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:18:27.008127Z","iopub.execute_input":"2025-06-20T13:18:27.008437Z","iopub.status.idle":"2025-06-20T13:18:27.191334Z","shell.execute_reply.started":"2025-06-20T13:18:27.008416Z","shell.execute_reply":"2025-06-20T13:18:27.190307Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Sex\nfemale    0.742038\nmale      0.188908\nName: Survived, dtype: float64\n","output_type":"stream"}],"execution_count":67},{"cell_type":"markdown","source":"Data cleaning","metadata":{}},{"cell_type":"code","source":"# Fill missing age with mean\ntrain['Age'] = train['Age'].fillna(train['Age'].mean())\ntest['Age'] = test['Age'].fillna(test['Age'].mean())\n\ntrain.head(7)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:18:34.757213Z","iopub.execute_input":"2025-06-20T13:18:34.757547Z","iopub.status.idle":"2025-06-20T13:18:34.773512Z","shell.execute_reply.started":"2025-06-20T13:18:34.757524Z","shell.execute_reply":"2025-06-20T13:18:34.772389Z"}},"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n5            6         0       3   \n6            7         0       1   \n\n                                                Name     Sex        Age  \\\n0                            Braund, Mr. Owen Harris    male  22.000000   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.000000   \n2                             Heikkinen, Miss. Laina  female  26.000000   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.000000   \n4                           Allen, Mr. William Henry    male  35.000000   \n5                                   Moran, Mr. James    male  29.699118   \n6                            McCarthy, Mr. Timothy J    male  54.000000   \n\n   SibSp  Parch            Ticket     Fare Cabin Embarked  \n0      1      0         A/5 21171   7.2500   NaN        S  \n1      1      0          PC 17599  71.2833   C85        C  \n2      0      0  STON/O2. 3101282   7.9250   NaN        S  \n3      1      0            113803  53.1000  C123        S  \n4      0      0            373450   8.0500   NaN        S  \n5      0      0            330877   8.4583   NaN        Q  \n6      0      0             17463  51.8625   E46        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>male</td>\n      <td>29.699118</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>male</td>\n      <td>54.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":68},{"cell_type":"code","source":"# Drop columns  whuch are not useful\ntrain.drop(columns=['Cabin', 'Name', 'Ticket'], inplace=True,axis=1)\ntest.drop(columns=['Cabin', 'Name', 'Ticket'], inplace=True,axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:19:18.360117Z","iopub.execute_input":"2025-06-20T13:19:18.360421Z","iopub.status.idle":"2025-06-20T13:19:18.367504Z","shell.execute_reply.started":"2025-06-20T13:19:18.360399Z","shell.execute_reply":"2025-06-20T13:19:18.366549Z"},"_kg_hide-input":true},"outputs":[],"execution_count":71},{"cell_type":"code","source":"# Fill Embarked with mode\ntrain['Embarked'] = train['Embarked'].fillna(train['Embarked'].mode()[0])\ntest['Embarked'] = test['Embarked'].fillna(test['Embarked'].mode()[0])\n\n# Fill Fare in test set only as train set has all\ntest['Fare'] = test['Fare'].fillna(test['Fare'].mean())\n\n\ntrain.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:18:47.004500Z","iopub.execute_input":"2025-06-20T13:18:47.004887Z","iopub.status.idle":"2025-06-20T13:18:47.022542Z","shell.execute_reply.started":"2025-06-20T13:18:47.004862Z","shell.execute_reply":"2025-06-20T13:18:47.021181Z"}},"outputs":[{"execution_count":69,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":69},{"cell_type":"code","source":"train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:19:24.911440Z","iopub.execute_input":"2025-06-20T13:19:24.911744Z","iopub.status.idle":"2025-06-20T13:19:24.924020Z","shell.execute_reply.started":"2025-06-20T13:19:24.911724Z","shell.execute_reply":"2025-06-20T13:19:24.923060Z"}},"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n0            1         0       3    male  22.0      1      0   7.2500        S\n1            2         1       1  female  38.0      1      0  71.2833        C\n2            3         1       3  female  26.0      0      0   7.9250        S\n3            4         1       1  female  35.0      1      0  53.1000        S\n4            5         0       3    male  35.0      0      0   8.0500        S","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":72},{"cell_type":"markdown","source":"convert values like male female into numerical values","metadata":{}},{"cell_type":"code","source":"# Map categorical columns to numeric after filling missing values\nsex_map = {'male': 0, 'female': 1}\nembarked_map = {'S': 0, 'C': 1, 'Q': 2}\n\ntrain['Sex'] = train['Sex'].map(sex_map).astype(int)\ntest['Sex'] = test['Sex'].map(sex_map).astype(int)\n\ntrain['Embarked'] = train['Embarked'].map(embarked_map).astype(int)\ntest['Embarked'] = test['Embarked'].map(embarked_map).astype(int)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:23:20.772263Z","iopub.execute_input":"2025-06-20T13:23:20.772572Z","iopub.status.idle":"2025-06-20T13:23:20.794506Z","shell.execute_reply.started":"2025-06-20T13:23:20.772550Z","shell.execute_reply":"2025-06-20T13:23:20.793131Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIntCastingNaNError\u001b[0m                        Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_35/3615905.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0membarked_map\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'S'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'C'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Q'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sex'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sex'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msex_map\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sex'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sex'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msex_map\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   6641\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6642\u001b[0m             \u001b[0;31m# else, only a single dtype is given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6643\u001b[0;31m             \u001b[0mnew_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6644\u001b[0m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor_from_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6645\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    428\u001b[0m             \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 430\u001b[0;31m         return self.apply(\n\u001b[0m\u001b[1;32m    431\u001b[0m             \u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m             \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, **kwargs)\u001b[0m\n\u001b[1;32m    361\u001b[0m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    362\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 363\u001b[0;31m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    364\u001b[0m             \u001b[0mresult_blocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextend_blocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapplied\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_blocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    365\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors, using_cow, squeeze)\u001b[0m\n\u001b[1;32m    756\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# type: ignore[call-overload]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    757\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 758\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array_safe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    759\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    760\u001b[0m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_coerce_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/dtypes/astype.py\u001b[0m in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    235\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 237\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    238\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mValueError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    239\u001b[0m         \u001b[0;31m# e.g. _astype_nansafe can fail on object-dtype of strings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/dtypes/astype.py\u001b[0m in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    180\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 182\u001b[0;31m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_astype_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m     \u001b[0;31m# in pandas we don't store numpy str dtypes, so convert to object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/dtypes/astype.py\u001b[0m in \u001b[0;36m_astype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m     99\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missubdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloating\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkind\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m\"iu\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 101\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_astype_float_to_int_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    102\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/dtypes/astype.py\u001b[0m in \u001b[0;36m_astype_float_to_int_nansafe\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    143\u001b[0m     \"\"\"\n\u001b[1;32m    144\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 145\u001b[0;31m         raise IntCastingNaNError(\n\u001b[0m\u001b[1;32m    146\u001b[0m             \u001b[0;34m\"Cannot convert non-finite values (NA or inf) to integer\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    147\u001b[0m         )\n","\u001b[0;31mIntCastingNaNError\u001b[0m: Cannot convert non-finite values (NA or inf) to integer"],"ename":"IntCastingNaNError","evalue":"Cannot convert non-finite values (NA or inf) to integer","output_type":"error"}],"execution_count":76},{"cell_type":"code","source":"train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:23:44.592278Z","iopub.execute_input":"2025-06-20T13:23:44.593149Z","iopub.status.idle":"2025-06-20T13:23:44.604558Z","shell.execute_reply.started":"2025-06-20T13:23:44.593122Z","shell.execute_reply":"2025-06-20T13:23:44.603656Z"}},"outputs":[{"execution_count":77,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n0            1         0       3    0  22.0      1      0   7.2500         0\n1            2         1       1    1  38.0      1      0  71.2833         1\n2            3         1       3    1  26.0      0      0   7.9250         0\n3            4         1       1    1  35.0      1      0  53.1000         0\n4            5         0       3    0  35.0      0      0   8.0500         0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":77},{"cell_type":"code","source":"train['FamilySize'] = train['SibSp'] + train['Parch'] + 1\ntest['FamilySize'] = test['SibSp'] + test['Parch'] + 1\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:26:09.556516Z","iopub.execute_input":"2025-06-20T13:26:09.557263Z","iopub.status.idle":"2025-06-20T13:26:09.564305Z","shell.execute_reply.started":"2025-06-20T13:26:09.557234Z","shell.execute_reply":"2025-06-20T13:26:09.563042Z"}},"outputs":[],"execution_count":79},{"cell_type":"code","source":"features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'FamilySize']\nX = train[features]\ny = train['Survived']\nX_test = test[features]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:26:15.881157Z","iopub.execute_input":"2025-06-20T13:26:15.881477Z","iopub.status.idle":"2025-06-20T13:26:15.890228Z","shell.execute_reply.started":"2025-06-20T13:26:15.881453Z","shell.execute_reply":"2025-06-20T13:26:15.889153Z"}},"outputs":[],"execution_count":80},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X, y)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:26:36.283470Z","iopub.execute_input":"2025-06-20T13:26:36.283820Z","iopub.status.idle":"2025-06-20T13:26:37.320279Z","shell.execute_reply.started":"2025-06-20T13:26:36.283796Z","shell.execute_reply":"2025-06-20T13:26:37.319527Z"}},"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(random_state=42)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":81},{"cell_type":"code","source":"predictions = model.predict(X_test)\nprint(predictions)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:28:59.381284Z","iopub.execute_input":"2025-06-20T13:28:59.381608Z","iopub.status.idle":"2025-06-20T13:28:59.403520Z","shell.execute_reply.started":"2025-06-20T13:28:59.381587Z","shell.execute_reply":"2025-06-20T13:28:59.402753Z"}},"outputs":[{"name":"stdout","text":"[0 0 0 1 0 0 0 0 1 0 0 0 1 0 1 1 0 1 0 1 1 0 1 0 1 0 1 1 1 0 0 0 1 0 0 1 0\n 0 0 1 0 0 0 1 1 0 0 0 1 1 0 0 1 1 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 1 0 0 0\n 1 0 0 1 0 1 1 0 0 0 0 0 1 0 1 1 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n 1 1 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0\n 0 0 1 0 0 1 0 0 1 0 1 1 1 1 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 0 0 1 0 1\n 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 1 0 1 0 0 1 0 1 0 0 0 0 1 0 0 1 0 1 0 1 0\n 1 1 1 0 0 1 0 0 0 1 0 0 0 0 1 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1\n 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0\n 1 0 0 0 0 0 0 0 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 1 0\n 1 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 0 1 0 1 0 0 1 0 1 1 1 1 0 0 0 1 1\n 0 1 0 0 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0\n 0 1 1 1 1 0 0 1 0 0 0]\n","output_type":"stream"}],"execution_count":87},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\nmodel.fit(X_train, y_train)\nval_preds = model.predict(X_val)\nprint(\"Validation accuracy:\", accuracy_score(y_val, val_preds))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:27:23.514109Z","iopub.execute_input":"2025-06-20T13:27:23.514431Z","iopub.status.idle":"2025-06-20T13:27:23.712544Z","shell.execute_reply.started":"2025-06-20T13:27:23.514408Z","shell.execute_reply":"2025-06-20T13:27:23.711680Z"}},"outputs":[{"name":"stdout","text":"Validation accuracy: 0.8268156424581006\n","output_type":"stream"}],"execution_count":86},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'PassengerId': test['PassengerId'],\n    'Survived': predictions  # Your model's predicted 0 or 1 values\n})\n\nsubmission.to_csv('submission.csv', index=False)\nprint(\"Submission file created!\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:36:21.936062Z","iopub.execute_input":"2025-06-20T13:36:21.936403Z","iopub.status.idle":"2025-06-20T13:36:21.944925Z","shell.execute_reply.started":"2025-06-20T13:36:21.936379Z","shell.execute_reply":"2025-06-20T13:36:21.943934Z"}},"outputs":[{"name":"stdout","text":"Submission file created!\n","output_type":"stream"}],"execution_count":89},{"cell_type":"code","source":"# Load both submission files\nsubmission_file = pd.read_csv('submission.csv')  # Your submission file\ngender_submission_file = pd.read_csv('/kaggle/input/titanic/gender_submission.csv')  # Gender-based submission\n\n# Ensure both files are sorted by 'PassengerId' to align the predictions\nsubmission_file = submission_file.sort_values(by='PassengerId').reset_index(drop=True)\ngender_submission_file = gender_submission_file.sort_values(by='PassengerId').reset_index(drop=True)\n\n# Compare the 'Survived' column in both submission files\ncomparison = submission_file['Survived'] == gender_submission_file['Survived']\n\n# Calculate accuracy of your model vs gender-based model\naccuracy = comparison.mean()  # This gives the proportion of correct predictions\nprint(f\"Accuracy of your submission compared to gender-based submission: {accuracy:.4f}\")\n\n# Calculate number of disagreements (where predictions differ)\ndisagreements = (submission_file['Survived'] != gender_submission_file['Survived']).sum()\nprint(f\"Number of disagreements: {disagreements}\")\n\n# Visualize the comparison using a bar plot\ncomparison_df = pd.DataFrame({\n    'PassengerId': submission_file['PassengerId'],\n    'Your_Submission': submission_file['Survived'],\n    'Gender_Submission': gender_submission_file['Survived'],\n    'Match': comparison\n})\n\n# Create a bar plot to show how many predictions match vs. disagree\nsns.countplot(data=comparison_df, x='Match', palette='coolwarm')\nplt.title('Comparison: Your Submission vs Gender-based Submission')\nplt.xlabel('Match (True or False)')\nplt.ylabel('Count')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T13:40:48.994225Z","iopub.execute_input":"2025-06-20T13:40:48.994539Z","iopub.status.idle":"2025-06-20T13:40:49.166661Z","shell.execute_reply.started":"2025-06-20T13:40:48.994516Z","shell.execute_reply":"2025-06-20T13:40:49.165952Z"}},"outputs":[{"name":"stdout","text":"Accuracy of your submission compared to gender-based submission: 0.8517\nNumber of disagreements: 62\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":92}]}